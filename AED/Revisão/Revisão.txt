//==========================================================================================
//Recursividade - 1 - MDC

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Recursividade_1MDC.Classes;

namespace Recursividade_1MDC
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine("MDC entre 10,6: " + Funcoes.mdc(10,6));
            Console.WriteLine("MDC entre 4, 6: " + Funcoes.mdc(4, 6));
            Console.WriteLine("MDC entre 6, 4: " + Funcoes.mdc(6, 4));
            Console.WriteLine("MDC entre 2, 4: " + Funcoes.mdc(2, 4));
            Console.WriteLine("MDC entre 4, 2: " + Funcoes.mdc(4, 2));
            Console.WriteLine("MDC entre 2, 2: " + Funcoes.mdc(2, 2));

            Console.ReadKey();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Recursividade_1MDC.Classes
{
    class Funcoes
    {
        public static int mdc(int x, int y)
        {
            if (x == y)
                return x;

            if (x > y)
                return mdc(x - y, y);
            return mdc(y - x, x);
        }
    }
}


//==========================================================================================
//Recursividade - 6_e - F

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Recursividade_6_e_Funcao.Classes;

namespace Recursividade_6_e_Funcao
{
    class Program
    {
        static void Main(string[] args)
        {
            Console.WriteLine(Funcoes.F(5));

            Console.ReadKey();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Recursividade_6_e_Funcao.Classes
{
    class Funcoes
    {
        public static int F(int num)
        {
            if (num == 1)
                return 1;
            if (num == 2)
                return 2;
            return ((2 * F(num - 1)) + (3 * F(num - 2)));
        }
    }
}


//==========================================================================================
//Pilha - 4 - Parêntesis

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Pilha_4_Parentesis.Classes;
using Pilha_4_Parentesis.Testes;

namespace Pilha_4_Parentesis
{
    class Program
    {
        static void Main(string[] args)
        {
            Pilha pilha = new Pilha();

            Console.Write("Digite a expressão que deseja avaliar: ");
            string exp = Console.ReadLine();
            bool valida = true;

            for (int i = 0; i < exp.Length; i++)
            {
                if (exp[i].Equals('('))
                {
                    pilha.empilhar(1);
                }
                else if (exp[i].Equals(')'))
                {
                    if (pilha.vazia())
                    {
                        valida = false;
                        break;
                    }
                    else
                    {
                        pilha.desEmpilhar();
                    }
                }
            }

            if (!pilha.vazia())
                valida = false;

            if (valida)
                Console.WriteLine("Expressão Matemática Correta!");
            else
                Console.WriteLine("Expressão Matemática Incorreta!");

            Console.ReadKey();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Pilha_4_Parentesis.Classes
{
    public class Celula
    {
        public int Dado;
        public Celula prox;

        public Celula(Celula prox, int dado)
        {
            this.Dado = dado;
            this.prox = prox;
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Pilha_4_Parentesis.Classes
{
    class Pilha
    {
        Celula topo;
        int tam = 0;

        public Pilha() { this.topo = null; }

        public void empilhar(int dado)
        {
            Celula nova = new Celula(topo, dado);
            topo = nova;
            tam++;
        }
        public int? desEmpilhar()
        {
            Celula nova = topo;
            if (nova != null)
            {
                topo = topo.prox;
                tam--;
                return nova.Dado;
            }
            return null;
        }
        public void imprimir()
        {
            Celula temp = topo;
            while (temp != null)
            {
                Console.Write(temp.Dado + " | ");
                temp = temp.prox;
            }
            Console.WriteLine();
        }
        public bool vazia() { return tam == 0; }
        public int tamanho() { return tam; }
    }
}

//==========================================================================================
//Fila - 6 - Prioridade